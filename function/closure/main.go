package main

import "fmt"

/*
go语言支持函数式编程:
	支持将一个函数作为另一个函数的参数，
	也支持将一个函数作为另一个函数的返回值。
		闭包(closure) = 外部环境 加 内部函数:
			一个外层函数中,有内层函数,该内层函数中,会操作外层函数的局部变量(外层函数中的参数，或者外层函数中直接定义的变量),
			并且该外层函数的返回值就是这个内层函数.

			这个内层函数和外层函数的局部变量,统称为闭包结构。

			闭包结构中外部函数的局部变量不会随外部函数结束而销毁
*/
func main() {
	f1 := fun1() //此时开辟了一个fun1空间给f1使用,f1代表的内层函数操作属于自己的一片空间
	f2 := fun1() //此时又开辟了一个fun1空间给f2使用,f2代表的内层函数操作属于自己的一片空间
	fmt.Println(f1(1))
	fmt.Println(f1(2))
	fmt.Println(f2(10))
	fmt.Println(f2(20))
}
func fun1() func(n int) int { //外层函数
	i := 1
	return func(n int) int { //内层函数
		i += n
		return i
	}
}
